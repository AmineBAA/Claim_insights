# -*- coding: utf-8 -*-
"""Claim_insights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j6PydEgbim2cDv5N-_02smUvVGDMMeQL
"""

import streamlit as st
import pandas as pd
import datetime as dt
import io

st.set_page_config(page_title="Reporting Réclamations", layout="wide")

st.title("📊 Reporting Réclamations Clients")

uploaded_file = st.file_uploader("📎 Téléversez le fichier Excel des réclamations", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Nettoyage dates
    today = pd.to_datetime(dt.datetime.today().date())
    df["DATE CREATION"] = pd.to_datetime(df["DATE CREATION"], errors='coerce')
    df["DATE CLOTURE"] = pd.to_datetime(df["DATE CLOTURE"], errors='coerce')

    # Délai JO recalculé
    df["Délai JO recalculé"] = (df["DATE CLOTURE"].fillna(today) - df["DATE CREATION"]).dt.days

    # Tranches
    def categorize_delay(d):
        if pd.isna(d):
            return "Non défini"
        elif d < 10:
            return "< 10 jours"
        elif 10 <= d <= 40:
            return "10 à 40 jours"
        else:
            return "> 40 jours"

    df["Tranche délai"] = df["Délai JO recalculé"].apply(categorize_delay)

    # Montant restitué
    df["Montant Restitué"] = df.apply(
        lambda x: x["MONTANT RESTITUTION"] if str(x["RESTITUTION"]).strip().upper() == "OUI" else 0, axis=1)
    total_restitution = df["Montant Restitué"].sum()

    # --- 🔍 Filtres ---
    st.sidebar.header("🔎 Filtres")
    tranche_filtre = st.sidebar.multiselect("Tranche délai", df["Tranche délai"].unique(), default=df["Tranche délai"].unique())
    responsable_filtre = st.sidebar.multiselect("Responsable", df["RESPONSABLE"].dropna().unique(), default=df["RESPONSABLE"].dropna().unique())
    statut_filtre = st.sidebar.multiselect("Statut", df["STATUS"].dropna().unique(), default=df["STATUS"].dropna().unique())
    canal_filtre = st.sidebar.multiselect("Canal source", df["CANAL SOURCE"].dropna().unique(), default=df["CANAL SOURCE"].dropna().unique())

    # --- 🎯 Application des filtres ---
    df_filtered = df[
        df["Tranche délai"].isin(tranche_filtre) &
        df["RESPONSABLE"].isin(responsable_filtre) &
        df["STATUS"].isin(statut_filtre) &
        df["CANAL SOURCE"].isin(canal_filtre)
    ]

    # --- 📈 Affichages statistiques ---
    st.subheader("📌 Statistiques par Tranche de Délai")
    st.bar_chart(df_filtered["Tranche délai"].value_counts())

    st.subheader("💰 Montant total restitué")
    st.metric("Total", f"{df_filtered['Montant Restitué'].sum():,.2f} MAD")

    st.subheader("👤 Réclamations par Responsable")
    st.bar_chart(df_filtered["RESPONSABLE"].value_counts())

    st.subheader("🏢 Réclamations par Entité Responsable")
    st.bar_chart(df_filtered["ENTITE RESPONSABLE"].value_counts())

    st.subheader("🏷️ Réclamations par Famille")
    st.bar_chart(df_filtered["FAMILLE"].value_counts())

    st.subheader("⚖️ Réclamations Fondées vs Non Fondées")
    st.bar_chart(df_filtered["FONDEE"].value_counts())

    st.subheader("📡 Réclamations par Canal Source")
    st.bar_chart(df_filtered["CANAL SOURCE"].value_counts())

    # --- 📥 Téléchargement fichier enrichi ---
    st.subheader("📥 Télécharger le fichier enrichi filtré")
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df_filtered.to_excel(writer, index=False, sheet_name="Réclamations filtrées")
        writer.save()
        st.download_button("📁 Télécharger Excel", data=buffer.getvalue(),
                           file_name="Reclamations_filtrees.xlsx", mime="application/vnd.ms-excel")