import streamlit as st
import pandas as pd
import datetime as dt
import io

st.set_page_config(page_title="Reporting R√©clamations", layout="wide")
st.title("üìä Reporting R√©clamations Clients")

uploaded_file = st.file_uploader("üìé T√©l√©versez le fichier Excel des r√©clamations", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Nettoyage des dates
    today = pd.to_datetime(dt.datetime.today().date())
    df["DATE CREATION"] = pd.to_datetime(df["DATE CREATION"], errors='coerce')
    df["DATE CLOTURE"] = pd.to_datetime(df["DATE CLOTURE"], errors='coerce')

    # D√©lai JO recalcul√©
    df["D√©lai JO recalcul√©"] = (df["DATE CLOTURE"].fillna(today) - df["DATE CREATION"]).dt.days

    # Tranche d√©lai
    def categorize_delay(d):
        if pd.isna(d):
            return "Non d√©fini"
        elif d < 10:
            return "< 10 jours"
        elif 10 <= d <= 40:
            return "10 √† 40 jours"
        else:
            return "> 40 jours"

    df["Tranche d√©lai"] = df["D√©lai JO recalcul√©"].apply(categorize_delay)

    # Restitution
    def rest_label(val):
        if pd.isna(val) or str(val).strip() == "":
            return "Non renseign√©"
        val = str(val).strip().upper()
        return "OUI" if val == "OUI" else "NON"

    df["Restitution label"] = df["RESTITUTION"].apply(rest_label)
    df["Montant Restitu√©"] = df.apply(
        lambda x: x["MONTANT RESTITUTION"] if x["Restitution label"] == "OUI" else 0, axis=1)

    # Mois / Ann√©e de cr√©ation
    df["Ann√©e"] = df["DATE CREATION"].dt.year.fillna("Non renseign√©")
    df["Mois"] = df["DATE CREATION"].dt.month.fillna("Non renseign√©")

    # Remplacer les valeurs NaN pour les filtres
    df["RESPONSABLE"] = df["RESPONSABLE"].fillna("Non renseign√©")
    df["STATUS"] = df["STATUS"].fillna("Non renseign√©")
    df["CANAL SOURCE"] = df["CANAL SOURCE"].fillna("Non renseign√©")
    df["FAMILLE"] = df["FAMILLE"].fillna("Non renseign√©")
    df["ENTITE RESPONSABLE"] = df["ENTITE RESPONSABLE"].fillna("Non renseign√©")
    df["FONDEE"] = df["FONDEE"].fillna("Non renseign√©")

    # --- üîç Filtres ---
    st.sidebar.header("üîé Filtres")

    tranche_options = sorted(df["Tranche d√©lai"].unique())
    responsable_options = sorted(df["RESPONSABLE"].unique())
    statut_options = sorted(df["STATUS"].unique())
    canal_options = sorted(df["CANAL SOURCE"].unique())
    restitution_options = sorted(df["Restitution label"].unique())
    annees = sorted(df["Ann√©e"].unique())
    mois = sorted(df["Mois"].unique())

    tranche_filtre = st.sidebar.multiselect("Tranche d√©lai", tranche_options, default=tranche_options)
    responsable_filtre = st.sidebar.multiselect("Responsable", responsable_options, default=responsable_options)
    statut_filtre = st.sidebar.multiselect("Statut", statut_options, default=statut_options)
    canal_filtre = st.sidebar.multiselect("Canal source", canal_options, default=canal_options)
    restitution_filtre = st.sidebar.multiselect("Restitution", restitution_options, default=restitution_options)
    annee_filtre = st.sidebar.multiselect("Ann√©e", annees, default=annees)
    mois_filtre = st.sidebar.multiselect("Mois", mois, default=mois)

    # --- üéØ Application des filtres ---
    df_filtered = df[
        df["Tranche d√©lai"].isin(tranche_filtre) &
        df["RESPONSABLE"].isin(responsable_filtre) &
        df["STATUS"].isin(statut_filtre) &
        df["CANAL SOURCE"].isin(canal_filtre) &
        df["Restitution label"].isin(restitution_filtre) &
        df["Ann√©e"].isin(annee_filtre) &
        df["Mois"].isin(mois_filtre)
    ]

    # --- üìä Visualisations ---
    st.subheader("üìÖ Histogramme des r√©clamations par jour")
    by_day = df_filtered["DATE CREATION"].dt.date.value_counts().sort_index()
    st.bar_chart(by_day)

    st.subheader("üìå R√©partition par Tranche de D√©lai")
    st.bar_chart(df_filtered["Tranche d√©lai"].value_counts())

    st.subheader("üí∞ Montant total restitu√©")
    st.metric("Total", f"{df_filtered['Montant Restitu√©'].sum():,.2f} MAD")

    st.subheader("üë§ R√©clamations par Responsable")
    st.bar_chart(df_filtered["RESPONSABLE"].value_counts())

    st.subheader("üè¢ R√©clamations par Entit√© Responsable")
    st.bar_chart(df_filtered["ENTITE RESPONSABLE"].value_counts())

    st.subheader("üè∑Ô∏è R√©clamations par Famille")
    st.bar_chart(df_filtered["FAMILLE"].value_counts())

    st.subheader("‚öñÔ∏è R√©clamations Fond√©es vs Non Fond√©es")
    st.bar_chart(df_filtered["FONDEE"].value_counts())

    st.subheader("üì° R√©clamations par Canal Source")
    st.bar_chart(df_filtered["CANAL SOURCE"].value_counts())

    # --- üì• T√©l√©chargement fichier enrichi filtr√© ---
    st.subheader("üì• T√©l√©charger le fichier enrichi filtr√©")
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df_filtered.to_excel(writer, index=False, sheet_name="R√©clamations filtr√©es")
        writer.save()
        st.download_button("üìÅ T√©l√©charger Excel", data=buffer.getvalue(),
                           file_name="Reclamations_filtrees.xlsx", mime="application/vnd.ms-excel")
